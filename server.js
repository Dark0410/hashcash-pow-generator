const express = require('express');
const cors = require('cors');
const { execSync } = require('child_process');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
app.use(express.json());

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public
app.use(express.static(path.join(__dirname, 'public')));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keccak
function checkKeccak() {
  try {
    require('keccak');
    return true;
  } catch {
    try {
      require('js-sha3');
      return true;
    } catch {
      return false;
    }
  }
}

// API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ POW
app.post('/api', (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.body || !req.body.pow) {
      return res.status(400).json({
        error: 'Invalid request format',
        message: 'Missing "pow" object in request body'
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const powData = req.body.pow;
    const version = powData.algorithm?.version || 1;
    const complexity = parseInt(powData.complexity) || 0;
    const timestamp = parseInt(powData.timestamp) || 0;
    const resource = powData.algorithm?.resourse || '';
    const extension = powData.algorithm?.extension || '';
    const randomString = powData.random_string || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (complexity <= 0 || timestamp <= 0 || !randomString) {
      return res.status(400).json({
        error: 'Missing required parameters',
        required: ['complexity > 0', 'timestamp > 0', 'random_string']
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const params = JSON.stringify({
      version,
      complexity,
      timestamp,
      resourse: resource,
      extension,
      random_string: randomString
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ POW
    const result = execSync(`node pow_calculator.js '${params}'`, {
      timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json(JSON.parse(result));
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'POW computation failed',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    time: new Date().toISOString(),
    keccakAvailable: checkKeccak(),
    memoryUsage: process.memoryUsage()
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.get('/api-test', (req, res) => {
  res.json({
    api: 'working',
    message: 'API endpoint is accessible',
    timestamp: Date.now()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({
    error: 'Not found',
    path: req.path,
    method: req.method
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üì° Access the server: http://localhost:${PORT}`);
  console.log(`üîê Keccak available: ${checkKeccak() ? 'YES' : 'NO'}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üß™ API test: http://localhost:${PORT}/api-test`);
});
